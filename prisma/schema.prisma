// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [vector]
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "postgresqlExtensions"]
}

// TODO: Find a way to automatically convert all camel to snake case in the future
// This is needed as the general PG queries from OpenAI always assumes that your column/table names are in snake case, when in reality they are in camel case, which requires double quotes to be enclosed
// OpenAI's response always lacks the double quotes enclosure, resulting in wrong queries
model HdbResaleTransaction {
  identifier      Int      @id @default(autoincrement())
  transactionDate DateTime @map("transaction_date")
  town            String
  block           String
  streetName      String   @map("street_name")

  // Example StoreyRange of [0-10] would have 0 at begin and 10 at end
  storeyRangeBegin Int @map("storey_range_begin")
  storeyRangeEnd   Int @map("storey_range_end")

  floorAreaSquareFeet    Int    @map("floor_area_square_feet")
  flatModel              String @map("flat_model")
  flatType               String @map("flat_type")
  leaseCommenceYear      Int    @map("lease_commence_year")
  remainingLeaseInMonths Int    @map("remaining_lease_in_months")
  resalePrice            Float  @map("resale_price")
  latitude               Float  @map("latitude")
  longitude              Float  @map("longitude")

  @@map("hdb_resale_transaction")
}

enum ChatMessageUser {
  AGENT
  USER
}

model Conversation {
  id        Int      @id @default(autoincrement())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  latestChatMessageAt DateTime @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id])

  chatMessages ChatMessage[]

  @@index([userId])
}

model ChatMessage {
  id               Int                          @id @default(autoincrement())
  type             ChatMessageUser
  messageEmbedding Unsupported("vector(1536)")?
  rawMessage       String

  createdAt DateTime @default(now())

  conversationId Int
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  suggestions    String[] @default([])

  @@index([createdAt])
}

model PreviousSqlQueryToQuestion {
  id                Int                          @id @default(autoincrement())
  questionEmbedding Unsupported("vector(1536)")?
  rawQuestion       String
  sqlQuery          String
}

model VerificationToken {
  identifier String   @id
  token      String
  attempts   Int      @default(0)
  expires    DateTime
}

model User {
  id            String         @id @default(cuid())
  name          String?
  username      String?        @unique
  email         String?        @unique
  emailVerified DateTime?      @map("email_verified")
  image         String?
  bio           String?
  conversations Conversation[]
}
